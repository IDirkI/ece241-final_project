module dot # (
	// Width of input INT and FLOAT portions
		parameter WII = 8,
					 WIF = 8;
		
	// Width of output INT and FLOAT portions
		parameter WOI = 8,
					 WOF = 8;
	)
	(
		v1,
		v2,
		out
	);
	
/*****************************************************************************
 *                           Parameter Declarations                          *
 *****************************************************************************/
 
/*****************************************************************************
 *                             Port Declarations                             *
 *****************************************************************************/
 
 // Inputs
	input wire	[WII + WIF:0] v1; 	// 1 sign bit + WII int bits + WIF float bits = {1,WII,WIF}
	input wire	[WII + WIF:0] v2; 	// 1 sign bit + WII int bits + WIF float bits = {1,WII,WIF}
	
 // Outputs
	output reg 	[WOI + WOF:0] out;	// 1 sign bit + WOI int bits + WOF float bits = {1,WOI,WOF}
	
/*****************************************************************************
 *                 Internal Wires and Registers Declarations                 *
 *****************************************************************************/
 
/*****************************************************************************
 *                         Finite State Machine(s)                           *
 *****************************************************************************/

/*****************************************************************************
 *                             Sequential Logic                              *
 *****************************************************************************/
 
/*****************************************************************************
 *                            Combinational Logic                            *
 *****************************************************************************/
 
/*****************************************************************************
 *                              Internal Modules                             *
 *****************************************************************************/
endmodule
