module GetKeyboard(
		// Inputs
			CLOCK50,
			reset,
			the_command,
			send_command,
			
		// Bidirectionals
			PS2_CLK,
			PS2_DAT,
			
		// Outputs
			command_was_sent,
			error_communication,
			ps2_key_data,
			ps2_key_pressed,
			
			keycode
			
);

/*****************************************************************************
 *                           Parameter Declarations                          *
 *****************************************************************************/
 parameter 	IDLE = 4'b0001,
				PRESS = 4'b0010, 
				START_BREAK = 4'b0100,
				END_BREAK = 4'b1000;

/*****************************************************************************
 *                             Port Declarations                             *
 *****************************************************************************/
 
	// Inputs
	input wire 			CLOCK50;
	input wire			reset;
	input wire [7:0]	the_command;
	input wire			send_command;
	
	// Bidirectional
	inout wire			PS2_CLK;
	inout wire			PS2_DAT;
	
	// Output
	output wire			command_was_sent;
	output wire			error_communication;
	output wire	[7:0]	ps2_key_data;
	output wire			ps2_key_pressed;
	output wire			keycode;
	
/*****************************************************************************
 *                 Internal Wires and Registers Declarations                 *
 *****************************************************************************/
	reg	[7:0] pos;
	reg 	[25:0] kbCount;
 
/*****************************************************************************
 *                         Finite State Machine(s)                           *
 *****************************************************************************/
 
 
/*****************************************************************************
 *                             Sequential Logic                              *
 *****************************************************************************/
 
 /*
  *		Recieve Data
  */
	always @ (posedge CLOCK_50) begin
		if(KEY[0] == 1'b0) begin// Reset condition: last data -> NONE
			last_data_received <= 8'h00;
		end
		else if (ps2_key_pressed == 1'b1) begin
			last_data_received <= ps2_key_data;
		end
	end
 
 /*
  *		Send Data
  */
	always @ (posedge CLOCK_50) begin
		if(KEY[0] == 1'b0) // Reset condition: command -> NONE
			the_command <= 0;
		else
			the_command <= SW[7:0];
	end
	
	/*
	 *		Debug Counter
	 */
	always @ (posedge CLOCK_50) begin
		if(KEY[0] == 1'b0) begin
			kbCount <= 26'b0;
			pos = 8'b0;
		end
		else if(last_data_received == 8'h1D) // Pressed 'W'
			kbCount <= kbCount + 1'b1;
			
			if(kbCount == 26'd10_000_000) begin
				kbCount <= 26'b0;
				pos <= pos + 1'b1;
			end
			
	end
 
/*****************************************************************************
 *                            Combinational Logic                            *
 *****************************************************************************/
 
/*****************************************************************************
 *                              Internal Modules                             *
 *****************************************************************************/
 
 PS2_Controller PS2 (
		// Inputs
		.CLOCK_50			(CLOCK_50),
		.reset				(reset),
		.the_command		(the_command),
		.send_command		(send_command),
		
		// Bidirectional
		.PS2_CLK				(PS2_CLK),
		.PS2_DAT				(PS2_DAT),
		
		// Outputs
		.command_was_sent	(command_was_sent),
		.error_communication_timed_out (error_communication),
		.received_data		(ps2_key_data),
		.received_data_en	(ps2_key_pressed)
	);
	
endmodule
